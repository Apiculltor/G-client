package com.seudominio.vuzixbladeapp

import android.Manifest
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.hardware.Camera
import android.media.MediaRecorder
import android.os.Bundle
import android.os.Handler
import android.util.Log
import android.view.SurfaceHolder
import android.view.SurfaceView
import android.widget.Toast
import android.widget.TextView
import android.widget.Button
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.appcompat.app.AppCompatActivity
import com.vuzix.hud.actionmenu.ActionMenuActivity
import java.text.SimpleDateFormat
import java.util.*

/**
 * MainActivity para Vuzix Blade 1.5 - ASSISTENTE DE ROTINA
 * Vers√£o adaptada para testes em emulador
 * Integra captura A/V com sistema completo de forma√ß√£o de h√°bitos
 */
class MainActivity : ActionMenuActivity(), SurfaceHolder.Callback {
    
    companion object {
        private const val TAG = "VuzixBladeApp"
        private const val CAMERA_PERMISSION_REQUEST = 100
        private const val UPDATE_INTERVAL = 30000L // Atualizar a cada 30 segundos
    }
    
    // === SISTEMA DE CAPTURA A/V ===
    private var camera: Camera? = null
    private var mediaRecorder: MediaRecorder? = null
    private var surfaceView: SurfaceView? = null
    private var surfaceHolder: SurfaceHolder? = null
    private var isRecording = false
    private var currentRecordingPath: String? = null
    
    // === ESTADO ATUAL ===
    private val handler = Handler()
    private val updateRunnable = object : Runnable {
        override fun run() {
            updateTasksDisplay()
            handler.postDelayed(this, UPDATE_INTERVAL)
        }
    }
    
    // === DADOS SIMULADOS PARA TESTE ===
    private val simulatedTasks = listOf(
        "üßò Medita√ß√£o - 06:30",
        "üí™ Exerc√≠cio - 07:00", 
        "üíß Beber √Ågua - 08:00",
        "üìö Leitura - 21:00",
        "üö∂ Caminhada - 19:30"
    )
    
    // === BROADCAST RECEIVERS ===
    private val habitSystemReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            when (intent?.action) {
                "com.seudominio.vuzixbladeapp.START_RECORDING" -> {
                    val taskId = intent.getLongExtra("task_id", -1)
                    val outputPath = intent.getStringExtra("output_path")
                    startAutomaticRecording(taskId, outputPath)
                }
                "com.seudominio.vuzixbladeapp.STOP_RECORDING" -> {
                    stopAutomaticRecording()
                }
            }
        }
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        Log.d(TAG, "üöÄ Vuzix Blade Assistente de Rotina iniciado (Modo Teste)")
        
        // Inicializar sistemas
        initializeTestSystem()
        setupCameraPreview()
        setupUIControls()
        setupBroadcastReceivers()
        
        // Verificar permiss√µes
        checkPermissions()
        
        // Processar intent se veio de notifica√ß√£o
        handleIncomingIntent(intent)
        
        // Inicializar interface
        updateUIStatus()
        
        // Iniciar atualiza√ß√µes autom√°ticas
        handler.post(updateRunnable)
    }
    
    /**
     * INICIALIZA√á√ÉO DO SISTEMA DE TESTE
     */
    private fun initializeTestSystem() {
        Log.d(TAG, "Inicializando sistema de teste...")
        
        try {
            Log.d(TAG, "‚úÖ Sistema de teste inicializado com ${simulatedTasks.size} tarefas simuladas")
            Toast.makeText(this, "Sistema de Teste Ativo", Toast.LENGTH_SHORT).show()
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao inicializar sistema de teste: ${e.message}")
            Toast.makeText(this, "Erro ao inicializar sistema", Toast.LENGTH_LONG).show()
        }
    }
    
    /**
     * CONFIGURA√á√ÉO DE BROADCAST RECEIVERS
     */
    private fun setupBroadcastReceivers() {
        val filter = IntentFilter().apply {
            addAction("com.seudominio.vuzixbladeapp.START_RECORDING")
            addAction("com.seudominio.vuzixbladeapp.STOP_RECORDING")
        }
        registerReceiver(habitSystemReceiver, filter)
    }
    
    /**
     * GRAVA√á√ÉO AUTOM√ÅTICA PARA TAREFA
     */
    private fun startAutomaticRecording(taskId: Long, outputPath: String?) {
        if (isRecording) {
            Log.w(TAG, "J√° existe uma grava√ß√£o ativa")
            return
        }
        
        Log.d(TAG, "üé¨ Iniciando grava√ß√£o autom√°tica para tarefa: $taskId")
        
        val finalOutputPath = outputPath ?: "${externalCacheDir?.absolutePath}/task_${taskId}_${System.currentTimeMillis()}.mp4"
        currentRecordingPath = finalOutputPath
        
        try {
            // Verificar se a c√¢mera est√° dispon√≠vel
            if (camera == null) {
                Log.w(TAG, "C√¢mera n√£o dispon√≠vel, simulando grava√ß√£o")
                simulateRecording()
                return
            }
            
            // Configurar MediaRecorder para tarefa espec√≠fica
            mediaRecorder = MediaRecorder().apply {
                setAudioSource(MediaRecorder.AudioSource.MIC)
                setVideoSource(MediaRecorder.VideoSource.CAMERA)
                setOutputFormat(MediaRecorder.OutputFormat.MPEG_4)
                setAudioEncoder(MediaRecorder.AudioEncoder.AAC)
                setVideoEncoder(MediaRecorder.VideoEncoder.H264)
                setOutputFile(finalOutputPath)
                
                // Configura√ß√µes otimizadas
                setVideoSize(480, 480)
                setVideoFrameRate(24)
                setVideoEncodingBitRate(1000000) // 1Mbps
                setAudioEncodingBitRate(64000)   // 64kbps
                
                camera?.unlock()
                setCamera(camera)
                setPreviewDisplay(surfaceHolder?.surface)
                
                prepare()
                start()
            }
            
            isRecording = true
            updateRecordingStatus(true)
            updateFeedbackDisplay("üé¨ Gravando", "Arquivo: $finalOutputPath", 1.0f)
            
            Log.d(TAG, "‚úÖ Grava√ß√£o autom√°tica iniciada: $finalOutputPath")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro na grava√ß√£o autom√°tica: ${e.message}")
            simulateRecording()
        }
    }
    
    /**
     * SIMULA√á√ÉO DE GRAVA√á√ÉO PARA TESTES
     */
    private fun simulateRecording() {
        isRecording = true
        updateRecordingStatus(true)
        updateFeedbackDisplay("üé¨ Simulando Grava√ß√£o", "Modo de teste ativo", 1.0f)
        
        // Simular grava√ß√£o por 5 segundos
        handler.postDelayed({
            stopAutomaticRecording()
        }, 5000)
    }
    
    /**
     * PARAR GRAVA√á√ÉO AUTOM√ÅTICA
     */
    private fun stopAutomaticRecording() {
        if (!isRecording) return
        
        Log.d(TAG, "‚èπ Parando grava√ß√£o autom√°tica")
        
        try {
            mediaRecorder?.apply {
                stop()
                reset()
                release()
            }
            mediaRecorder = null
            
            camera?.lock()
            isRecording = false
            updateRecordingStatus(false)
            
            currentRecordingPath = null
            updateFeedbackDisplay("‚úÖ Grava√ß√£o finalizada", "Dados processados", 1.0f)
            
            Log.d(TAG, "‚úÖ Grava√ß√£o autom√°tica finalizada")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Erro ao parar grava√ß√£o: ${e.message}")
            isRecording = false
            updateRecordingStatus(false)
            updateFeedbackDisplay("‚úÖ Teste finalizado", "Simula√ß√£o conclu√≠da", 1.0f)
        }
    }
    
    /**
     * ATUALIZAR DISPLAY DE TAREFAS
     */
    private fun updateTasksDisplay() {
        // Simular pr√≥xima tarefa
        val nextTaskView = findViewById<TextView>(R.id.next_task)
        val currentHour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY)
        val nextTask = when {
            currentHour < 7 -> "üßò Medita√ß√£o - 06:30"
            currentHour < 8 -> "üí™ Exerc√≠cio - 07:00"
            currentHour < 19 -> "üíß Beber √Ågua - a cada hora"
            currentHour < 21 -> "üö∂ Caminhada - 19:30"
            else -> "üìö Leitura - 21:00"
        }
        
        nextTaskView?.text = "üéØ PR√ìXIMA TAREFA\n$nextTask"
        
        // Simular tarefas de hoje
        val todayTasksView = findViewById<TextView>(R.id.today_tasks)
        val completedToday = (currentHour / 4) // Simular progresso
        todayTasksView?.text = "üìä Hoje: $completedToday/${simulatedTasks.size} conclu√≠das"
    }
    
    /**
     * PROCESSAR INTENT DE NOTIFICA√á√ÉO
     */
    private fun handleIncomingIntent(intent: Intent?) {
        intent?.let { 
            val taskId = it.getLongExtra("task_id", -1)
            val action = it.getStringExtra("action")
            
            if (taskId != -1L && action != null) {
                Log.d(TAG, "üì± Intent recebido: $action para tarefa $taskId")
                updateFeedbackDisplay("üì± A√ß√£o: $action", "Tarefa ID: $taskId", 1.0f)
            }
        }
    }
    
    private fun setupCameraPreview() {
        surfaceView = findViewById(R.id.surface_view)
        surfaceHolder = surfaceView?.holder
        surfaceHolder?.addCallback(this)
        surfaceHolder?.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS)
    }
    
    private fun checkPermissions() {
        val permissions = arrayOf(
            Manifest.permission.CAMERA,
            Manifest.permission.RECORD_AUDIO,
            Manifest.permission.WRITE_EXTERNAL_STORAGE
        )
        
        val permissionsToRequest = permissions.filter {
            ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
        }
        
        if (permissionsToRequest.isNotEmpty()) {
            ActivityCompat.requestPermissions(
                this,
                permissionsToRequest.toTypedArray(),
                CAMERA_PERMISSION_REQUEST
            )
        } else {
            initializeCamera()
        }
    }
    
    private fun initializeCamera() {
        try {
            camera = Camera.open()
            camera?.setPreviewDisplay(surfaceHolder)
            
            val parameters = camera?.parameters
            parameters?.setPreviewSize(480, 480)
            camera?.parameters = parameters
            
            camera?.startPreview()
            Log.d(TAG, "‚úÖ C√¢mera inicializada")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ö†Ô∏è C√¢mera n√£o dispon√≠vel (emulador): ${e.message}")
            // Continuar sem c√¢mera em emulador
        }
    }
    
    private fun setupUIControls() {
        // Controles b√°sicos
        val btnManualRecord = findViewById<Button>(R.id.btn_manual_record)
        
        btnManualRecord?.setOnClickListener {
            if (!isRecording) {
                startManualRecording()
            } else {
                stopAutomaticRecording()
            }
        }
        
        // Bot√µes de teste
        val btnTestTask = findViewById<Button>(R.id.btn_test_task)
        btnTestTask?.setOnClickListener {
            testTaskExecution()
        }
        
        val btnTestNotification = findViewById<Button>(R.id.btn_test_notification)
        btnTestNotification?.setOnClickListener {
            testNotificationSystem()
        }
        
        updateConnectionStatus(true) // Simular conex√£o para teste
        updateRecordingStatus(false)
    }
    
    private fun startManualRecording() {
        startAutomaticRecording(-1, null) // -1 indica grava√ß√£o manual
    }
    
    private fun testTaskExecution() {
        updateFeedbackDisplay("üß™ Teste de Tarefa", "Simulando execu√ß√£o...", 1.0f)
        
        handler.postDelayed({
            startAutomaticRecording(1, null)
        }, 1000)
    }
    
    private fun testNotificationSystem() {
        updateFeedbackDisplay("üîî Teste Notifica√ß√£o", "Sistema funcionando", 1.0f)
        Toast.makeText(this, "Notifica√ß√£o de teste enviada", Toast.LENGTH_SHORT).show()
    }
    
    private fun updateUIStatus() {
        updateConnectionStatus(true) // Simular conex√£o
        updateRecordingStatus(isRecording)
        updateTasksDisplay()
        
        val timeFormat = SimpleDateFormat("HH:mm", Locale.getDefault())
        val currentTime = timeFormat.format(Date())
        
        updateFeedbackDisplay(
            "üöÄ Assistente de Rotina",
            "Modo Teste - $currentTime",
            1.0f
        )
    }
    
    private fun updateConnectionStatus(connected: Boolean) {
        val connectionStatusView = findViewById<TextView>(R.id.connection_status)
        connectionStatusView?.apply {
            text = if (connected) "üì° S24 Conectado (Simulado)" else "üì° Desconectado"
            setTextColor(if (connected) 0xFF00FF00.toInt() else 0xFFFF6600.toInt())
        }
    }
    
    private fun updateRecordingStatus(recording: Boolean) {
        val recordingStatusView = findViewById<TextView>(R.id.recording_status)
        recordingStatusView?.apply {
            text = if (recording) "üî¥ Gravando" else "‚ö™ Pronto"
            setTextColor(if (recording) 0xFFFF0000.toInt() else 0xFF00FF00.toInt())
        }
        
        val btnManualRecord = findViewById<Button>(R.id.btn_manual_record)
        btnManualRecord?.text = if (recording) "‚èπ Parar" else "üé¨ Gravar"
    }
    
    private fun updateFeedbackDisplay(result: String, details: String = "", confidence: Float = 0.0f) {
        val feedbackResult = findViewById<TextView>(R.id.feedback_result)
        val feedbackDetails = findViewById<TextView>(R.id.feedback_details)
        val feedbackConfidence = findViewById<TextView>(R.id.feedback_confidence)
        
        feedbackResult?.text = result
        feedbackDetails?.text = details
        
        if (confidence > 0.0f) {
            feedbackConfidence?.text = "Confian√ßa: ${(confidence * 100).toInt()}%"
            feedbackConfidence?.visibility = android.view.View.VISIBLE
        } else {
            feedbackConfidence?.visibility = android.view.View.GONE
        }
        
        Log.d(TAG, "üîÑ Feedback: $result | $details")
    }
    
    // Implementa√ß√£o SurfaceHolder.Callback
    override fun surfaceCreated(holder: SurfaceHolder) {
        Log.d(TAG, "Surface criada")
    }
    
    override fun surfaceChanged(holder: SurfaceHolder, format: Int, width: Int, height: Int) {
        Log.d(TAG, "Surface alterada: ${width}x${height}")
    }
    
    override fun surfaceDestroyed(holder: SurfaceHolder) {
        Log.d(TAG, "Surface destru√≠da")
        releaseCamera()
    }
    
    private fun releaseCamera() {
        camera?.apply {
            stopPreview()
            release()
        }
        camera = null
    }
    
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        
        when (requestCode) {
            CAMERA_PERMISSION_REQUEST -> {
                if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                    initializeCamera()
                    Toast.makeText(this, "Permiss√µes concedidas", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this, "Continuando sem c√¢mera (modo teste)", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        
        // Limpar recursos
        handler.removeCallbacks(updateRunnable)
        try {
            unregisterReceiver(habitSystemReceiver)
        } catch (e: Exception) {
            Log.e(TAG, "Erro ao desregistrar receiver: ${e.message}")
        }
        
        releaseCamera()
        if (isRecording) {
            stopAutomaticRecording()
        }
        
        Log.d(TAG, "üõë MainActivity destru√≠da")
    }
    
    override fun onResume() {
        super.onResume()
        updateTasksDisplay()
    }
}
