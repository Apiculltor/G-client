package com.seudominio.vuzixbladeapp.data.models

/**
 * Relat√≥rio de progresso de h√°bitos
 * Consolida√ß√£o de dados para an√°lise de progresso
 */
data class HabitReport(
    val id: Long = 0,
    val reportType: ReportType,          // Tipo do relat√≥rio (di√°rio, semanal, mensal)
    val startDate: Long,                 // In√≠cio do per√≠odo
    val endDate: Long,                   // Fim do per√≠odo
    val totalTasks: Int,                 // Total de tarefas programadas
    val completedTasks: Int,             // Tarefas conclu√≠das
    val partialTasks: Int,               // Tarefas parcialmente conclu√≠das
    val missedTasks: Int,                // Tarefas perdidas
    val averageScore: Float,             // Score m√©dio das execu√ß√µes
    val totalExecutionTime: Int,         // Tempo total de execu√ß√£o (minutos)
    val onTimePercentage: Float,         // Percentual de execu√ß√µes no hor√°rio
    val mostProductiveTime: String?,     // Hor√°rio mais produtivo (HH:mm)
    val leastProductiveTime: String?,    // Hor√°rio menos produtivo (HH:mm)
    val topPerformingCategory: TaskCategory?, // Categoria com melhor performance
    val improvementSuggestions: List<String>, // Sugest√µes de melhoria
    val createdAt: Long = System.currentTimeMillis()
) {
    
    /**
     * Calcula taxa de sucesso (0-100%)
     */
    fun getSuccessRate(): Float {
        return if (totalTasks > 0) {
            ((completedTasks + partialTasks * 0.5f) / totalTasks * 100)
        } else 0f
    }
    
    /**
     * Calcula taxa de consist√™ncia (baseada em execu√ß√µes no hor√°rio)
     */
    fun getConsistencyRate(): Float = onTimePercentage
    
    /**
     * Gera resumo textual do relat√≥rio
     */
    fun getSummary(): String {
        val successRate = getSuccessRate()
        val consistency = getConsistencyRate()
        
        return buildString {
            append("üìä ${reportType.displayName}\n")
            append("‚úÖ Taxa de Sucesso: ${String.format("%.1f", successRate)}%\n")
            append("‚è∞ Consist√™ncia: ${String.format("%.1f", consistency)}%\n")
            append("üìà Score M√©dio: ${String.format("%.1f", averageScore)}/100\n")
            
            if (mostProductiveTime != null) {
                append("üåü Melhor Hor√°rio: $mostProductiveTime\n")
            }
            
            if (topPerformingCategory != null) {
                append("üèÜ Melhor Categoria: ${topPerformingCategory.displayName}\n")
            }
        }
    }
    
    /**
     * Gera feedback baseado no desempenho
     */
    fun getPerformanceFeedback(): String {
        val successRate = getSuccessRate()
        
        return when {
            successRate >= 90 -> "üåü Excelente! Voc√™ est√° dominando seus h√°bitos!"
            successRate >= 70 -> "üëç Muito bem! Continue assim!"
            successRate >= 50 -> "‚ö° Bom progresso, mas h√° espa√ßo para melhoria"
            successRate >= 30 -> "üí™ N√£o desista! Pequenos passos levam a grandes resultados"
            else -> "üéØ Vamos focar em h√°bitos mais simples primeiro"
        }
    }
}

/**
 * Tipo de relat√≥rio
 */
enum class ReportType(val displayName: String, val durationDays: Int) {
    DAILY("Relat√≥rio Di√°rio", 1),
    WEEKLY("Relat√≥rio Semanal", 7),
    MONTHLY("Relat√≥rio Mensal", 30),
    CUSTOM("Per√≠odo Personalizado", 0)
}

/**
 * Dados estat√≠sticos consolidados para dashboard
 */
data class DashboardStats(
    val todayTasks: Int,                 // Tarefas de hoje
    val todayCompleted: Int,             // Conclu√≠das hoje
    val currentStreak: Int,              // Sequ√™ncia atual de dias
    val longestStreak: Int,              // Maior sequ√™ncia j√° alcan√ßada
    val weeklySuccessRate: Float,        // Taxa de sucesso da semana
    val totalHabitsFormed: Int,          // Total de h√°bitos formados
    val activeHabits: Int,               // H√°bitos ativos
    val nextTaskTime: String?,           // Pr√≥xima tarefa (HH:mm)
    val nextTaskName: String?            // Nome da pr√≥xima tarefa
)